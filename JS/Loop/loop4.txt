
Exercise 31: Looping with For...Of (Objects)

1. Create an object with key-value pairs representing student names and their grades.
2. Use for...of to iterate through the object and print each student's name and grade.
3. Calculate the average grade of the students using for...of.
4. Use for...of to find and print the student with the highest grade.
5. Modify the object to include a new student and grade.

Exercise 32: Looping with While Loop (Advanced)

1. Create an array of random numbers between 1 and 20.
2. Use a while loop to find and print the last occurrence of a specific number in the array.
3. Use a while loop to find and print the index of the minimum number in the array.
4. Create a while loop that stops when a specific condition is met, such as reaching a certain product.
5. Use a while loop to shuffle the elements in the array randomly.

Exercise 33: Looping with Do-While Loop (Advanced)

1. Create an array of words.
2. Use a do-while loop to prompt the user to enter a word until they enter a word that is in the array.
3. Create a do-while loop to simulate a lottery game where the user has to guess a random number between 1 and 100 until they win.
4. Implement a do-while loop that prints a menu of options and executes the selected option until the user chooses to exit.
5. Create a do-while loop that calculates the Fibonacci sequence until a specific value is reached.

Exercise 34: Looping Over Sets

1. Create a Set containing a list of unique names.
2. Use a for...of loop to print each name in the Set.
3. Add a new name to the Set.
4. Use for...of to iterate through the modified Set and print all names.
5. Delete a name from the Set and use for...of to iterate through the updated Set.

Exercise 35: Looping with For...Of (Generators)

1. Create a generator function that generates an infinite sequence of numbers starting from 1.
2. Use a for...of loop to print the first 10 numbers generated by the generator function.
3. Create a generator function that generates a sequence of Fibonacci numbers.
4. Use for...of to print the first 10 Fibonacci numbers generated by the generator function.
5. Create a generator function that generates an infinite sequence of random numbers between 1 and 100.

Exercise 36: Looping with Map, Filter, and Reduce (Generators)

1. Create a generator function that generates an infinite sequence of even numbers.
2. Use map to calculate the square of each number generated by the generator function.
3. Use filter to get a list of numbers greater than 50 from the sequence.
4. Use reduce to find the sum of the first 10 numbers generated by the generator function.
5. Create a generator function that generates an infinite sequence of prime numbers.

Exercise 37: Looping with Async/Await (Promises and Generators)

1. Create an async function that generates and prints the first 10 prime numbers using a generator function.
2. Implement error handling using try...catch within the async function.
3. Create an async function that chains multiple async tasks to execute sequentially using generators.
4. Use async/await to parallelize the execution of multiple async tasks that return promises.
5. Create an async function that fetches data from multiple endpoints using async generators and aggregates the results.

Exercise 38: Looping Over Nested Arrays

1. Create a nested array of numbers.
2. Use nested loops to print each number in the nested array.
3. Calculate the sum of all numbers in the nested array using nested loops.
4. Use nested loops to find and print the largest number in the nested array.
5. Create a function that flattens a nested array into a single-level array using nested loops.

Exercise 39: Looping with Promises (Advanced)

1. Create an array of promises that simulate asynchronous tasks with varying delays.
2. Use Promise.all to wait for all promises to resolve and print the results.
3. Implement error handling with Promise.catch for one of the promises.
4. Create a function that simulates parallel execution of promises with varying delays using Promise.all.
5. Create a promise that resolves after a random delay between 1 and 5 seconds and use Promise.race to handle it.

Exercise 40: Looping with Async/Await (Advanced)

1. Create an async function that simulates fetching data from multiple APIs concurrently and aggregates the results.
2. Implement error handling using try...catch within the async function.
3. Use async/await to parallelize the execution of multiple async tasks that return promises with varying delays.
4. Create an async function that fetches data from multiple endpoints using async generators and aggregates the results with error handling.
5. Implement pagination logic using async/await to fetch and aggregate data from paginated API endpoints.
