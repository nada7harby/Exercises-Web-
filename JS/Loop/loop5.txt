

Exercise 41: Looping with For...In (Sets)

1. Create a Set containing a list of unique city names.
2. Use a for...in loop to iterate through the Set and print each city name.
3. Add a new city name to the Set.
4. Use for...in to iterate through the modified Set and print all city names.
5. Delete a city name from the Set and use for...in to iterate through the updated Set.

Exercise 42: Looping with For...In (Maps)

1. Create a Map with key-value pairs representing countries and their capitals.
2. Use a for...in loop to iterate through the Map and print each country and its capital.
3. Add a new country and its capital to the Map.
4. Use for...in to iterate through the modified Map and print all countries and capitals.
5. Delete a country and its capital from the Map and use for...in to iterate through the updated Map.

Exercise 43: Looping with For...Of (Maps)

1. Create a Map with key-value pairs representing product names and their prices.
2. Use for...of to iterate through the Map and print each product name and price.
3. Calculate the total cost of all products in the Map using for...of.
4. Use for...of to find and print the most expensive product in the Map.
5. Modify the Map to include a new product and its price.

Exercise 44: Looping with For...Of (Sets)

1. Create a Set containing a list of unique book titles.
2. Use for...of to iterate through the Set and print each book title.
3. Add a new book title to the Set.
4. Use for...of to iterate through the modified Set and print all book titles.
5. Delete a book title from the Set and use for...of to iterate through the updated Set.

Exercise 45: Looping with For...In (Generators)

1. Create a generator function that generates an infinite sequence of even numbers.
2. Use for...in to iterate through the first 10 numbers generated by the generator function.
3. Create a generator function that generates a sequence of random integers between 1 and 100.
4. Use for...in to find and print the index of the first prime number generated by the generator function.
5. Create a generator function that generates an infinite sequence of uppercase letters.

Exercise 46: Looping with For...Of (Promises)

1. Create an array of promises that simulate asynchronous tasks with varying delays.
2. Use for...of to execute each promise and print the results in the order they resolve.
3. Implement error handling using try...catch within the for...of loop.
4. Create a function that simulates parallel execution of promises using for...of.
5. Use for...of to execute an array of promises concurrently and handle the first resolved promise using Promise.race.

Exercise 47: Looping with Async/Await (Arrays)

1. Create an async function that fetches data from an array of URLs sequentially and prints the results.
2. Implement error handling using try...catch within the async function.
3. Create an async function that fetches data from an array of URLs concurrently and aggregates the results.
4. Use async/await to parallelize the execution of multiple async tasks that return promises.
5. Create an async function that fetches data from multiple API endpoints using async generators and aggregates the results.

Exercise 48: Looping Over Nested Objects

1. Create a nested object representing a family tree.
2. Use nested loops to print the names and ages of all family members.
3. Calculate the total number of family members in the object using nested loops.
4. Use nested loops to find and print the oldest family member's name and age.
5. Create a function that flattens a nested object into a single-level object using nested loops.

Exercise 49: Looping with Promises (Advanced)

1. Create an array of promises that simulate asynchronous tasks with varying delays and dependencies.
2. Use Promise.all to execute promises with dependencies and print the results.
3. Implement error handling with Promise.catch for one of the promises.
4. Create a function that simulates parallel execution of promises with dependencies using Promise.all.
5. Create a promise that resolves after a random delay between 2 and 5 seconds and use Promise.race to handle it.

Exercise 50: Looping with Async/Await (Advanced)

1. Create an async function that fetches data from multiple API endpoints concurrently and aggregates the results with dependencies.
2. Implement error handling using try...catch within the async function.
3. Use async/await to parallelize the execution of multiple async tasks that return promises with varying delays and dependencies.
4. Create an async function that fetches data from multiple API endpoints using async generators, aggregates the results with dependencies, and handles errors.
5. Implement pagination logic using async/await to fetch and aggregate data from paginated API endpoints with dependencies.
