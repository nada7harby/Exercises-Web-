

Exercise 31: String Parsing

1. Create a variable `url` and assign it a URL with query parameters (e.g., "https://example.com/page?param1=value1&param2=value2").
2. Parse the query parameters from the URL into an object.
3. Convert the object of query parameters back into a query string.
4. Extract the protocol (e.g., "https") from the URL.
5. Extract the hostname (e.g., "example.com") from the URL.

Exercise 32: String Formatting

1. Create a variable `rawText` and assign it a multiline raw text (with line breaks and indentation).
2. Remove leading and trailing whitespace from each line in `rawText`.
3. Remove all line breaks from `rawText` to make it a single-line string.
4. Split `rawText` into an array of lines.
5. Indent each line in `rawText` by adding a specific number of spaces at the beginning.

Exercise 33: String Validation

1. Create a variable `email` and assign it an email address.
2. Check if the email address is in a valid format (contains '@' and a domain).
3. Create a variable `password` and assign it a password.
4. Check if the password meets minimum security requirements (e.g., length, uppercase, lowercase, numbers, symbols).
5. Create a variable `phoneNumber` and assign it a phone number.
6. Check if the phone number is in a valid format (e.g., with or without country code, hyphens, parentheses).

Exercise 34: String Transformation

1. Create a variable `sentence` and assign it a sentence with a mix of uppercase and lowercase letters.
2. Convert the first letter of each word in `sentence` to uppercase.
3. Create a function that reverses the case of each letter in a string.
4. Replace all vowels in `sentence` with numbers (e.g., 'a' with '1', 'e' with '2').
5. Remove all non-alphanumeric characters (except spaces) from `sentence`.

Exercise 35: String Truncation and Ellipsis

1. Create a variable `longText` and assign it a long paragraph.
2. Truncate `longText` to a specific length (e.g., 100 characters), preserving full words.
3. If truncated, add an ellipsis ("...") at the end.
4. Create a function that truncates a string and adds an ellipsis if necessary.
5. Count and display the number of characters removed during truncation.

Exercise 36: String Searching and Highlighting

1. Create a variable `text` and assign it a long text containing multiple occurrences of a word.
2. Find and display all occurrences of a specific word in `text` along with their positions.
3. Highlight all occurrences of that word in `text` by wrapping them in `<span>` tags.
4. Create a function that counts the occurrences of a given word in a text.
5. Find and display the longest word in `text`.

Exercise 37: String Reversal and Palindrome

1. Create a variable `word` and assign it a single word.
2. Reverse the characters in `word`.
3. Check if the reversed `word` is the same as the original (a palindrome).
4. Create a function that checks if a string is a palindrome.
5. Find the longest palindrome substring in a sentence.

Exercise 38: String Rotation and Substitution

1. Create a variable `str` and assign it a string.
2. Rotate the characters in `str` by a specific number of positions (e.g., shift all characters one position to the left).
3. Create a function that performs a Caesar cipher on a string (shifts characters by a fixed number).
4. Substitute specific characters in `str` with other characters.
5. Create a function that swaps the positions of two words in a sentence.

Exercise 39: String Compression and Decompression

1. Create a variable `compressed` and assign it a compressed string (e.g., "a3b2c4").
2. Decompress `compressed` to its original form (e.g., "aaabbbcccc").
3. Create a function that compresses a string by counting consecutive characters.
4. Compress a longer string and compare the compressed size to the original size.
5. Decompress a string with mixed alphabetic and numeric characters.

Exercise 40: String Sorting

1. Create an array of strings with unsorted words.
2. Sort the array of strings in alphabetical order.
3. Sort the array of strings in reverse alphabetical order.
4. Sort the array of strings by length (shortest to longest).
5. Sort the array of strings randomly.

